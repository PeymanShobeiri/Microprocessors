
AVRASM ver. 2.1.30  C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm Fri Dec 31 21:03:10 2021

C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _totall=R4
                 	.DEF _totall_msb=R5
                 	.DEF _cnt=R6
                 	.DEF _cnt_msb=R7
                 	.DEF _sw=R8
                 	.DEF _sw_msb=R9
                 	.DEF _pw=R10
                 	.DEF _pw_msb=R11
                 	.DEF _lk=R12
                 	.DEF _lk_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00be 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 014c 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _Pattern:
00002a fdfe
00002b f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _keypad:
00002c 3837
00002d 2f39
00002e 3534
00002f 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
000030 3231
000031 2d33
000032 3043
000033 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x0:
000039 4150
00003a 5353
00003b 4f57
00003c 4452      	.DB  0x50,0x41,0x53,0x53,0x57,0x4F,0x52,0x44
00003d 4320
00003e 4148
00003f 474e
000040 4445      	.DB  0x20,0x43,0x48,0x41,0x4E,0x47,0x45,0x44
000041 4900
000042 564e
000043 4c41
000044 4449      	.DB  0x0,0x49,0x4E,0x56,0x41,0x4C,0x49,0x44
000045 4320
000046 4148
000047 2052
000048 0021      	.DB  0x20,0x43,0x48,0x41,0x52,0x20,0x21,0x0
000049 4e45
00004a 4554
00004b 2052
00004c 4150      	.DB  0x45,0x4E,0x54,0x45,0x52,0x20,0x50,0x41
00004d 5353
00004e 4f57
00004f 4452
000050 4500      	.DB  0x53,0x53,0x57,0x4F,0x52,0x44,0x0,0x45
000051 544e
000052 5245
000053 5020
000054 5341      	.DB  0x4E,0x54,0x45,0x52,0x20,0x50,0x41,0x53
000055 5753
000056 524f
000057 2044
000058 4620      	.DB  0x53,0x57,0x4F,0x52,0x44,0x20,0x20,0x46
000059 5249
00005a 5453
00005b 4c00
00005c 434f      	.DB  0x49,0x52,0x53,0x54,0x0,0x4C,0x4F,0x43
00005d 004b
00005e 504f
00005f 4e45
000060 5700      	.DB  0x4B,0x0,0x4F,0x50,0x45,0x4E,0x0,0x57
000061 4f52
000062 474e
000063 5020
000064 5341      	.DB  0x52,0x4F,0x4E,0x47,0x20,0x50,0x41,0x53
000065 0053
000066 2a2a
000067 2a2a
000068 4500      	.DB  0x53,0x0,0x2A,0x2A,0x2A,0x2A,0x0,0x45
000069 544e
00006a 5245
00006b 4e20
00006c 5745      	.DB  0x4E,0x54,0x45,0x52,0x20,0x4E,0x45,0x57
00006d 5020
00006e 5341
00006f 0053
000070 5245      	.DB  0x20,0x50,0x41,0x53,0x53,0x0,0x45,0x52
000071 4f52
000072 4552
000073 5300
000074 7465      	.DB  0x52,0x4F,0x52,0x45,0x0,0x53,0x65,0x74
000075 7020
000076 7361
000077 2073
000078 203a      	.DB  0x20,0x70,0x61,0x73,0x73,0x20,0x3A,0x20
000079 5000
00007a 4552
00007b 5353
00007c 5420      	.DB  0x0,0x50,0x52,0x45,0x53,0x53,0x20,0x54
00007d 5248
00007e 4545
00007f 3d20
000080 5420      	.DB  0x48,0x52,0x45,0x45,0x20,0x3D,0x20,0x54
000081 204f
000082 4553
000083 2054
000084 4150      	.DB  0x4F,0x20,0x53,0x45,0x54,0x20,0x50,0x41
000085 5353
000086 4f57
000087 4452
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1159): warning: .cseg .db misalignment - padding zero byte
000088 0000      	.DB  0x53,0x53,0x57,0x4F,0x52,0x44,0x0
                 _0x2000003:
000089 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1163): warning: .cseg .db misalignment - padding zero byte
00008a 0001      	.DB  0x1
                 _0x2040000:
00008b 4e2d
00008c 4e41
00008d 4900
00008e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Apple\Desktop\Safe_Box\code_5\Debug\List\bbb.asm(1166): warning: .cseg .db misalignment - padding zero byte
00008f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000090 000a      	.DW  0x0A
000091 0004      	.DW  0x04
000092 0068      	.DW  __REG_VARS*2
                 
000093 0011      	.DW  0x11
000094 0260      	.DW  _0x10
000095 0072      	.DW  _0x0*2
                 
000096 000f      	.DW  0x0F
000097 0271      	.DW  _0x10+17
000098 0083      	.DW  _0x0*2+17
                 
000099 000f      	.DW  0x0F
00009a 0280      	.DW  _0x1E
00009b 0092      	.DW  _0x0*2+32
                 
00009c 0016      	.DW  0x16
00009d 028f      	.DW  _0x1E+15
00009e 00a1      	.DW  _0x0*2+47
                 
00009f 0005      	.DW  0x05
0000a0 02a5      	.DW  _0x1E+37
0000a1 00b7      	.DW  _0x0*2+69
                 
0000a2 0005      	.DW  0x05
0000a3 02aa      	.DW  _0x1E+42
0000a4 00bc      	.DW  _0x0*2+74
                 
0000a5 000b      	.DW  0x0B
0000a6 02af      	.DW  _0x1E+47
0000a7 00c1      	.DW  _0x0*2+79
                 
0000a8 0005      	.DW  0x05
0000a9 02ba      	.DW  _0x1E+58
0000aa 00cc      	.DW  _0x0*2+90
                 
0000ab 000f      	.DW  0x0F
0000ac 02bf      	.DW  _0x1E+63
0000ad 00d1      	.DW  _0x0*2+95
                 
0000ae 0007      	.DW  0x07
0000af 02ce      	.DW  _0x1E+78
0000b0 00e0      	.DW  _0x0*2+110
                 
0000b1 000c      	.DW  0x0C
0000b2 02d5      	.DW  _0x1E+85
0000b3 00e7      	.DW  _0x0*2+117
                 
0000b4 001e      	.DW  0x1E
0000b5 02e1      	.DW  _0x38
0000b6 00f3      	.DW  _0x0*2+129
                 
0000b7 0002      	.DW  0x02
0000b8 0309      	.DW  __base_y_G100
0000b9 0112      	.DW  _0x2000003*2
                 
0000ba 0001      	.DW  0x01
0000bb 0310      	.DW  __seed_G102
0000bc 0114      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
0000bd 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000be 94f8      	CLI
0000bf 27ee      	CLR  R30
0000c0 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c1 e0f1      	LDI  R31,1
0000c2 bff5      	OUT  MCUCR,R31
0000c3 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000c4 e08d      	LDI  R24,(14-2)+1
0000c5 e0a2      	LDI  R26,2
0000c6 27bb      	CLR  R27
                 __CLEAR_REG:
0000c7 93ed      	ST   X+,R30
0000c8 958a      	DEC  R24
0000c9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ca e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cb e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cc e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000cd 93ed      	ST   X+,R30
0000ce 9701      	SBIW R24,1
0000cf f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d0 e2e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d1 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d2 9185      	LPM  R24,Z+
0000d3 9195      	LPM  R25,Z+
0000d4 9700      	SBIW R24,0
0000d5 f061      	BREQ __GLOBAL_INI_END
0000d6 91a5      	LPM  R26,Z+
0000d7 91b5      	LPM  R27,Z+
0000d8 9005      	LPM  R0,Z+
0000d9 9015      	LPM  R1,Z+
0000da 01bf      	MOVW R22,R30
0000db 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dc 9005      	LPM  R0,Z+
0000dd 920d      	ST   X+,R0
0000de 9701      	SBIW R24,1
0000df f7e1      	BRNE __GLOBAL_INI_LOOP
0000e0 01fb      	MOVW R30,R22
0000e1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e2 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e3 bfed      	OUT  SPL,R30
0000e4 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e5 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e6 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e7 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e8 940c 0257 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <sleep.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;flash char Pattern[4]={0xFE, 0xFD, 0xFB, 0xF7};
                 ;flash char keypad [4][4]=    {'7', '8', '9', '/',
                 ;                              '4', '5', '6', '*',
                 ;                              '1', '2', '3', '-',
                 ;                              'C', '0', '=', '+'};
                 ;char password[5],cur[5];
                 ;int totall=0,cnt=0,sw=0,pw=0,lk=0;
                 ;
                 ;int check_pass(){
                 ; 0000 000E int check_pass(){
                 
                 	.CSEG
                 _check_pass:
                 ; .FSTART _check_pass
                 ; 0000 000F     int j;
                 ; 0000 0010     for(j=0;j<4;j++){
0000ea 931a      	ST   -Y,R17
0000eb 930a      	ST   -Y,R16
                 ;	j -> R16,R17
                +
0000ec e000     +LDI R16 , LOW ( 0 )
0000ed e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
                +
0000ee 3004     +CPI R16 , LOW ( 4 )
0000ef e0e0     +LDI R30 , HIGH ( 4 )
0000f0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000f1 f494      	BRGE _0x5
                 ; 0000 0011         if (password[j] != cur[j]){
0000f2 efaf      	LDI  R26,LOW(_password)
0000f3 e0b2      	LDI  R27,HIGH(_password)
0000f4 0fa0      	ADD  R26,R16
0000f5 1fb1      	ADC  R27,R17
0000f6 900c      	LD   R0,X
0000f7 e0a4      	LDI  R26,LOW(_cur)
0000f8 e0b3      	LDI  R27,HIGH(_cur)
0000f9 0fa0      	ADD  R26,R16
0000fa 1fb1      	ADC  R27,R17
0000fb 91ec      	LD   R30,X
0000fc 15e0      	CP   R30,R0
0000fd f019      	BREQ _0x6
                 ; 0000 0012             return 0;}
0000fe e0e0      	LDI  R30,LOW(0)
0000ff e0f0      	LDI  R31,HIGH(0)
000100 c005      	RJMP _0x20C0002
                 ; 0000 0013         }
                 _0x6:
                +
000101 5f0f     +SUBI R16 , LOW ( - 1 )
000102 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000103 cfea      	RJMP _0x4
                 _0x5:
                 ; 0000 0014         return 1;
000104 e0e1      	LDI  R30,LOW(1)
000105 e0f0      	LDI  R31,HIGH(1)
                 _0x20C0002:
000106 9109      	LD   R16,Y+
000107 9119      	LD   R17,Y+
000108 9508      	RET
                 ; 0000 0015 }
                 ; .FEND
                 ;
                 ;void set_pass(char x){
                 ; 0000 0017 void set_pass(char x){
                 _set_pass:
                 ; .FSTART _set_pass
                 ; 0000 0018         if ((x>='0' && x<='9') && totall < 4){
000109 93aa      	ST   -Y,R26
                 ;	x -> Y+0
00010a 81a8      	LD   R26,Y
00010b 33a0      	CPI  R26,LOW(0x30)
00010c f010      	BRLO _0x8
00010d 33aa      	CPI  R26,LOW(0x3A)
00010e f008      	BRLO _0x9
                 _0x8:
00010f c005      	RJMP _0xA
                 _0x9:
000110 e0e4      	LDI  R30,LOW(4)
000111 e0f0      	LDI  R31,HIGH(4)
000112 164e      	CP   R4,R30
000113 065f      	CPC  R5,R31
000114 f00c      	BRLT _0xB
                 _0xA:
000115 c009      	RJMP _0x7
                 _0xB:
                 ; 0000 0019           password[totall]=x;
000116 01f2      	MOVW R30,R4
000117 50e1      	SUBI R30,LOW(-_password)
000118 4ffd      	SBCI R31,HIGH(-_password)
000119 81a8      	LD   R26,Y
00011a 83a0      	STD  Z+0,R26
                 ; 0000 001A           totall ++;
00011b 01f2      	MOVW R30,R4
00011c 9631      	ADIW R30,1
00011d 012f      	MOVW R4,R30
                 ; 0000 001B           }
                 ; 0000 001C         else if (totall == 4 && x == '+'){
00011e c02b      	RJMP _0xC
                 _0x7:
00011f e0e4      	LDI  R30,LOW(4)
000120 e0f0      	LDI  R31,HIGH(4)
000121 15e4      	CP   R30,R4
000122 05f5      	CPC  R31,R5
000123 f419      	BRNE _0xE
000124 81a8      	LD   R26,Y
000125 32ab      	CPI  R26,LOW(0x2B)
000126 f009      	BREQ _0xF
                 _0xE:
000127 c012      	RJMP _0xD
                 _0xF:
                 ; 0000 001D           lcd_clear();
000128 940e 02ab 	CALL _lcd_clear
                 ; 0000 001E           lcd_puts("PASSWORD CHANGED");
                +
00012a e6a0     +LDI R26 , LOW ( _0x10 + ( 0 ) )
00012b e0b2     +LDI R27 , HIGH ( _0x10 + ( 0 ) )
                 	__POINTW2MN _0x10,0
00012c 940e 02d9 	CALL _lcd_puts
                 ; 0000 001F           totall =0;
00012e 2444      	CLR  R4
00012f 2455      	CLR  R5
                 ; 0000 0020           sw=0;
000130 2488      	CLR  R8
000131 2499      	CLR  R9
                 ; 0000 0021           pw=1;
000132 e0e1      	LDI  R30,LOW(1)
000133 e0f0      	LDI  R31,HIGH(1)
000134 015f      	MOVW R10,R30
                 ; 0000 0022           cnt=0;
000135 2466      	CLR  R6
000136 2477      	CLR  R7
                 ; 0000 0023           delay_ms(300);
000137 e2ac      	LDI  R26,LOW(300)
000138 e0b1      	LDI  R27,HIGH(300)
000139 c00c      	RJMP _0x3D
                 ; 0000 0024           lcd_clear();
                 ; 0000 0025         }
                 ; 0000 0026         else {
                 _0xD:
                 ; 0000 0027           lcd_clear();
00013a 940e 02ab 	CALL _lcd_clear
                 ; 0000 0028           lcd_puts("INVALID CHAR !");
                +
00013c e7a1     +LDI R26 , LOW ( _0x10 + ( 17 ) )
00013d e0b2     +LDI R27 , HIGH ( _0x10 + ( 17 ) )
                 	__POINTW2MN _0x10,17
00013e 940e 02d9 	CALL _lcd_puts
                 ; 0000 0029           totall = 0;
000140 2444      	CLR  R4
000141 2455      	CLR  R5
                 ; 0000 002A           cnt=0;
000142 2466      	CLR  R6
000143 2477      	CLR  R7
                 ; 0000 002B           delay_ms(700);
000144 ebac      	LDI  R26,LOW(700)
000145 e0b2      	LDI  R27,HIGH(700)
                 _0x3D:
000146 940e 0337 	CALL _delay_ms
                 ; 0000 002C           lcd_clear();
000148 940e 02ab 	CALL _lcd_clear
                 ; 0000 002D          }
                 _0xC:
                 ; 0000 002E          }
00014a 940c 0316 	JMP  _0x20C0001
                 ; .FEND
                 
                 	.DSEG
                 _0x10:
000260           	.BYTE 0x20
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void){
                 ; 0000 0030 interrupt [4] void ext_int2_isr(void){
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
00014c 920a      	ST   -Y,R0
00014d 921a      	ST   -Y,R1
00014e 92fa      	ST   -Y,R15
00014f 936a      	ST   -Y,R22
000150 937a      	ST   -Y,R23
000151 938a      	ST   -Y,R24
000152 939a      	ST   -Y,R25
000153 93aa      	ST   -Y,R26
000154 93ba      	ST   -Y,R27
000155 93ea      	ST   -Y,R30
000156 93fa      	ST   -Y,R31
000157 b7ef      	IN   R30,SREG
000158 93ea      	ST   -Y,R30
                 ; 0000 0031 
                 ; 0000 0032   char row, column;
                 ; 0000 0033   char tmp;
                 ; 0000 0034 
                 ; 0000 0035 
                 ; 0000 0036   for( row=0; row<4; row++){
000159 940e 0346 	CALL __SAVELOCR4
                 ;	row -> R17
                 ;	column -> R16
                 ;	tmp -> R19
00015b e010      	LDI  R17,LOW(0)
                 _0x13:
00015c 3014      	CPI  R17,4
00015d f4c0      	BRSH _0x14
                 ; 0000 0037      PORTD = Pattern[row];
00015e 2fe1      	MOV  R30,R17
00015f e0f0      	LDI  R31,0
000160 5aec      	SUBI R30,LOW(-_Pattern*2)
000161 4fff      	SBCI R31,HIGH(-_Pattern*2)
000162 9004      	LPM  R0,Z
000163 ba02      	OUT  0x12,R0
                 ; 0000 0038 
                 ; 0000 0039      if (PIND.4 == 0){
000164 9984      	SBIC 0x10,4
000165 c002      	RJMP _0x15
                 ; 0000 003A        column  = 0;
000166 e000      	LDI  R16,LOW(0)
                 ; 0000 003B        break;
000167 c00e      	RJMP _0x14
                 ; 0000 003C        }
                 ; 0000 003D      else if (PIND.5 == 0){
                 _0x15:
000168 9985      	SBIC 0x10,5
000169 c002      	RJMP _0x17
                 ; 0000 003E        column  = 1;
00016a e001      	LDI  R16,LOW(1)
                 ; 0000 003F        break;
00016b c00a      	RJMP _0x14
                 ; 0000 0040          }
                 ; 0000 0041      else if (PIND.6 == 0){
                 _0x17:
00016c 9986      	SBIC 0x10,6
00016d c002      	RJMP _0x19
                 ; 0000 0042        column  = 2;
00016e e002      	LDI  R16,LOW(2)
                 ; 0000 0043        break;
00016f c006      	RJMP _0x14
                 ; 0000 0044              }
                 ; 0000 0045      else if (PIND.7 == 0){
                 _0x19:
000170 9987      	SBIC 0x10,7
000171 c002      	RJMP _0x1B
                 ; 0000 0046        column  = 3;
000172 e003      	LDI  R16,LOW(3)
                 ; 0000 0047        break;
000173 c002      	RJMP _0x14
                 ; 0000 0048                  }
                 ; 0000 0049   }
                 _0x1B:
000174 5f1f      	SUBI R17,-1
000175 cfe6      	RJMP _0x13
                 _0x14:
                 ; 0000 004A 
                 ; 0000 004B   tmp = keypad[row][column];
000176 2fe1      	MOV  R30,R17
000177 e5a8      	LDI  R26,LOW(_keypad*2)
000178 e0b0      	LDI  R27,HIGH(_keypad*2)
000179 e0f0      	LDI  R31,0
00017a 940e 0341 	CALL __LSLW2
00017c 0fae      	ADD  R26,R30
00017d 1fbf      	ADC  R27,R31
00017e 2fe0      	MOV  R30,R16
00017f e0f0      	LDI  R31,0
000180 0fea      	ADD  R30,R26
000181 1ffb      	ADC  R31,R27
000182 9134      	LPM  R19,Z
                 ; 0000 004C 
                 ; 0000 004D   if ( tmp =='C' ){
000183 3433      	CPI  R19,67
000184 f489      	BRNE _0x1C
                 ; 0000 004E       if (pw==1){
000185 e0e1      	LDI  R30,LOW(1)
000186 e0f0      	LDI  R31,HIGH(1)
000187 15ea      	CP   R30,R10
000188 05fb      	CPC  R31,R11
000189 f439      	BRNE _0x1D
                 ; 0000 004F       lcd_puts("ENTER PASSWORD");
                +
00018a e8a0     +LDI R26 , LOW ( _0x1E + ( 0 ) )
00018b e0b2     +LDI R27 , HIGH ( _0x1E + ( 0 ) )
                 	__POINTW2MN _0x1E,0
00018c 940e 0320 	CALL SUBOPT_0x0
                 ; 0000 0050       delay_ms(500);
                 ; 0000 0051       cnt =0;
00018e 2466      	CLR  R6
00018f 2477      	CLR  R7
                 ; 0000 0052       lcd_clear();
000190 c004      	RJMP _0x3E
                 ; 0000 0053       }
                 ; 0000 0054       else {
                 _0x1D:
                 ; 0000 0055       lcd_puts("ENTER PASSWORD  FIRST");
                +
000191 e8af     +LDI R26 , LOW ( _0x1E + ( 15 ) )
000192 e0b2     +LDI R27 , HIGH ( _0x1E + ( 15 ) )
                 	__POINTW2MN _0x1E,15
000193 940e 0320 	CALL SUBOPT_0x0
                 ; 0000 0056       delay_ms(500);
                 ; 0000 0057       lcd_clear();
                 _0x3E:
000195 d115      	RCALL _lcd_clear
                 ; 0000 0058       }
                 ; 0000 0059    }
                 ; 0000 005A 
                 ; 0000 005B   if (tmp!='C' ){
                 _0x1C:
000196 3433      	CPI  R19,67
000197 f049      	BREQ _0x20
                 ; 0000 005C       lcd_putchar(tmp);
000198 2fa3      	MOV  R26,R19
000199 d11f      	RCALL _lcd_putchar
                 ; 0000 005D       cur[cnt]=tmp;
00019a 01f3      	MOVW R30,R6
00019b 5fec      	SUBI R30,LOW(-_cur)
00019c 4ffc      	SBCI R31,HIGH(-_cur)
00019d 8330      	ST   Z,R19
                 ; 0000 005E       cnt ++;
00019e 01f3      	MOVW R30,R6
00019f 9631      	ADIW R30,1
0001a0 013f      	MOVW R6,R30
                 ; 0000 005F   }
                 ; 0000 0060   if (cnt==4 && sw==0 ){
                 _0x20:
0001a1 e0e4      	LDI  R30,LOW(4)
0001a2 e0f0      	LDI  R31,HIGH(4)
0001a3 15e6      	CP   R30,R6
0001a4 05f7      	CPC  R31,R7
0001a5 f421      	BRNE _0x22
0001a6 2400      	CLR  R0
0001a7 1408      	CP   R0,R8
0001a8 0409      	CPC  R0,R9
0001a9 f009      	BREQ _0x23
                 _0x22:
0001aa c035      	RJMP _0x21
                 _0x23:
                 ; 0000 0061     if (check_pass()==1){
0001ab df3e      	RCALL _check_pass
0001ac 30e1      	CPI  R30,LOW(0x1)
0001ad e0a0      	LDI  R26,HIGH(0x1)
0001ae 07fa      	CPC  R31,R26
0001af f541      	BRNE _0x24
                 ; 0000 0062         if(lk==0){
0001b0 2c0c      	MOV  R0,R12
0001b1 280d      	OR   R0,R13
0001b2 f479      	BRNE _0x25
                 ; 0000 0063         lk=1;
0001b3 e0e1      	LDI  R30,LOW(1)
0001b4 e0f0      	LDI  R31,HIGH(1)
0001b5 016f      	MOVW R12,R30
                 ; 0000 0064         PORTB = 0x81;
0001b6 e8e1      	LDI  R30,LOW(129)
0001b7 bbe8      	OUT  0x18,R30
                 ; 0000 0065         delay_ms(590);
0001b8 e4ae      	LDI  R26,LOW(590)
0001b9 e0b2      	LDI  R27,HIGH(590)
0001ba 940e 0337 	CALL _delay_ms
                 ; 0000 0066         PORTB = 0x01;
0001bc e0e1      	LDI  R30,LOW(1)
0001bd bbe8      	OUT  0x18,R30
                 ; 0000 0067         lcd_clear();
0001be d0ec      	RCALL _lcd_clear
                 ; 0000 0068         lcd_puts("LOCK");
                +
0001bf eaa5     +LDI R26 , LOW ( _0x1E + ( 37 ) )
0001c0 e0b2     +LDI R27 , HIGH ( _0x1E + ( 37 ) )
                 	__POINTW2MN _0x1E,37
0001c1 c00d      	RJMP _0x3F
                 ; 0000 0069         delay_ms(500);
                 ; 0000 006A         cnt=0;
                 ; 0000 006B         }
                 ; 0000 006C         else{
                 _0x25:
                 ; 0000 006D         lk=0;
0001c2 24cc      	CLR  R12
0001c3 24dd      	CLR  R13
                 ; 0000 006E         PORTB = 0x80;
0001c4 e8e0      	LDI  R30,LOW(128)
0001c5 bbe8      	OUT  0x18,R30
                 ; 0000 006F         delay_ms(530);
0001c6 e1a2      	LDI  R26,LOW(530)
0001c7 e0b2      	LDI  R27,HIGH(530)
0001c8 940e 0337 	CALL _delay_ms
                 ; 0000 0070         PORTB = 0x00;
0001ca e0e0      	LDI  R30,LOW(0)
0001cb bbe8      	OUT  0x18,R30
                 ; 0000 0071         lcd_clear();
0001cc d0de      	RCALL _lcd_clear
                 ; 0000 0072         lcd_puts("OPEN");
                +
0001cd eaaa     +LDI R26 , LOW ( _0x1E + ( 42 ) )
0001ce e0b2     +LDI R27 , HIGH ( _0x1E + ( 42 ) )
                 	__POINTW2MN _0x1E,42
                 _0x3F:
0001cf d109      	RCALL _lcd_puts
                 ; 0000 0073         delay_ms(500);
0001d0 efa4      	LDI  R26,LOW(500)
0001d1 e0b1      	LDI  R27,HIGH(500)
0001d2 940e 0337 	CALL _delay_ms
                 ; 0000 0074         cnt=0;
0001d4 2466      	CLR  R6
0001d5 2477      	CLR  R7
                 ; 0000 0075     }
                 ; 0000 0076     lcd_clear();
0001d6 d0d4      	RCALL _lcd_clear
                 ; 0000 0077     }
                 ; 0000 0078     else{
0001d7 c008      	RJMP _0x27
                 _0x24:
                 ; 0000 0079     lcd_clear();
0001d8 d0d2      	RCALL _lcd_clear
                 ; 0000 007A 
                 ; 0000 007B     lcd_puts("WRONG PASS");
                +
0001d9 eaaf     +LDI R26 , LOW ( _0x1E + ( 47 ) )
0001da e0b2     +LDI R27 , HIGH ( _0x1E + ( 47 ) )
                 	__POINTW2MN _0x1E,47
0001db 940e 0320 	CALL SUBOPT_0x0
                 ; 0000 007C     delay_ms(500);
                 ; 0000 007D     lcd_clear();
0001dd d0cd      	RCALL _lcd_clear
                 ; 0000 007E     cnt=0;
0001de 2466      	CLR  R6
0001df 2477      	CLR  R7
                 ; 0000 007F     }
                 _0x27:
                 ; 0000 0080     }
                 ; 0000 0081   if (sw==1 && pw==1){
                 _0x21:
0001e0 e0e1      	LDI  R30,LOW(1)
0001e1 e0f0      	LDI  R31,HIGH(1)
0001e2 15e8      	CP   R30,R8
0001e3 05f9      	CPC  R31,R9
0001e4 f419      	BRNE _0x29
0001e5 15ea      	CP   R30,R10
0001e6 05fb      	CPC  R31,R11
0001e7 f009      	BREQ _0x2A
                 _0x29:
0001e8 c029      	RJMP _0x28
                 _0x2A:
                 ; 0000 0082     if (cnt==4){
0001e9 e0e4      	LDI  R30,LOW(4)
0001ea e0f0      	LDI  R31,HIGH(4)
0001eb 15e6      	CP   R30,R6
0001ec 05f7      	CPC  R31,R7
0001ed f521      	BRNE _0x2B
                 ; 0000 0083     delay_ms(700);
0001ee ebac      	LDI  R26,LOW(700)
0001ef e0b2      	LDI  R27,HIGH(700)
0001f0 940e 0326 	CALL SUBOPT_0x1
                 ; 0000 0084     lcd_clear();
                 ; 0000 0085     lcd_puts("****");
                +
0001f2 ebaa     +LDI R26 , LOW ( _0x1E + ( 58 ) )
0001f3 e0b2     +LDI R27 , HIGH ( _0x1E + ( 58 ) )
                 	__POINTW2MN _0x1E,58
0001f4 d0e4      	RCALL _lcd_puts
                 ; 0000 0086     delay_ms(400);
0001f5 e9a0      	LDI  R26,LOW(400)
0001f6 e0b1      	LDI  R27,HIGH(400)
0001f7 940e 0326 	CALL SUBOPT_0x1
                 ; 0000 0087     lcd_clear();
                 ; 0000 0088     if (check_pass()){
0001f9 def0      	RCALL _check_pass
0001fa 9730      	SBIW R30,0
0001fb f059      	BREQ _0x2C
                 ; 0000 0089         pw=0;
0001fc 24aa      	CLR  R10
0001fd 24bb      	CLR  R11
                 ; 0000 008A         sw=1;
0001fe e0e1      	LDI  R30,LOW(1)
0001ff e0f0      	LDI  R31,HIGH(1)
000200 014f      	MOVW R8,R30
                 ; 0000 008B         lcd_puts("ENTER NEW PASS");
                +
000201 ebaf     +LDI R26 , LOW ( _0x1E + ( 63 ) )
000202 e0b2     +LDI R27 , HIGH ( _0x1E + ( 63 ) )
                 	__POINTW2MN _0x1E,63
000203 d0d5      	RCALL _lcd_puts
                 ; 0000 008C         delay_ms(800);
000204 e2a0      	LDI  R26,LOW(800)
000205 e0b3      	LDI  R27,HIGH(800)
000206 c006      	RJMP _0x40
                 ; 0000 008D         lcd_clear();
                 ; 0000 008E         cnt =0;
                 ; 0000 008F 
                 ; 0000 0090         }
                 ; 0000 0091     else{
                 _0x2C:
                 ; 0000 0092      lcd_clear();
000207 d0a3      	RCALL _lcd_clear
                 ; 0000 0093      lcd_puts("ERRORE");
                +
000208 ecae     +LDI R26 , LOW ( _0x1E + ( 78 ) )
000209 e0b2     +LDI R27 , HIGH ( _0x1E + ( 78 ) )
                 	__POINTW2MN _0x1E,78
00020a d0ce      	RCALL _lcd_puts
                 ; 0000 0094      delay_ms(300);
00020b e2ac      	LDI  R26,LOW(300)
00020c e0b1      	LDI  R27,HIGH(300)
                 _0x40:
00020d 940e 0337 	CALL _delay_ms
                 ; 0000 0095      lcd_clear();
00020f d09b      	RCALL _lcd_clear
                 ; 0000 0096      cnt=0;
000210 2466      	CLR  R6
000211 2477      	CLR  R7
                 ; 0000 0097     }
                 ; 0000 0098    }
                 ; 0000 0099   }
                 _0x2B:
                 ; 0000 009A 
                 ; 0000 009B   if (sw==1 && pw==0){
                 _0x28:
000212 e0e1      	LDI  R30,LOW(1)
000213 e0f0      	LDI  R31,HIGH(1)
000214 15e8      	CP   R30,R8
000215 05f9      	CPC  R31,R9
000216 f421      	BRNE _0x2F
000217 2400      	CLR  R0
000218 140a      	CP   R0,R10
000219 040b      	CPC  R0,R11
00021a f009      	BREQ _0x30
                 _0x2F:
00021b c002      	RJMP _0x2E
                 _0x30:
                 ; 0000 009C       set_pass(tmp);
00021c 2fa3      	MOV  R26,R19
00021d deeb      	RCALL _set_pass
                 ; 0000 009D       }
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0   if ((cur[0]=='=' && cur[1]=='=' && cur[2]=='=') || (cur[3]=='=' && cur[2]=='=' && cur[1]=='=')){
                 _0x2E:
00021e 91a0 0304 	LDS  R26,_cur
000220 33ad      	CPI  R26,LOW(0x3D)
000221 f441      	BRNE _0x32
                +
000222 91a0 0305+LDS R26 , _cur + ( 1 )
                 	__GETB2MN _cur,1
000224 33ad      	CPI  R26,LOW(0x3D)
000225 f421      	BRNE _0x32
                +
000226 91a0 0306+LDS R26 , _cur + ( 2 )
                 	__GETB2MN _cur,2
000228 33ad      	CPI  R26,LOW(0x3D)
000229 f069      	BREQ _0x34
                 _0x32:
                +
00022a 91a0 0307+LDS R26 , _cur + ( 3 )
                 	__GETB2MN _cur,3
00022c 33ad      	CPI  R26,LOW(0x3D)
00022d f441      	BRNE _0x35
                +
00022e 91a0 0306+LDS R26 , _cur + ( 2 )
                 	__GETB2MN _cur,2
000230 33ad      	CPI  R26,LOW(0x3D)
000231 f421      	BRNE _0x35
                +
000232 91a0 0305+LDS R26 , _cur + ( 1 )
                 	__GETB2MN _cur,1
000234 33ad      	CPI  R26,LOW(0x3D)
000235 f009      	BREQ _0x34
                 _0x35:
000236 c00d      	RJMP _0x31
                 _0x34:
                 ; 0000 00A1         cnt = 0;
000237 2466      	CLR  R6
000238 2477      	CLR  R7
                 ; 0000 00A2         sw=1;
000239 e0e1      	LDI  R30,LOW(1)
00023a e0f0      	LDI  R31,HIGH(1)
00023b 014f      	MOVW R8,R30
                 ; 0000 00A3         lcd_clear();
00023c d06e      	RCALL _lcd_clear
                 ; 0000 00A4         lcd_puts("Set pass : ");
                +
00023d eda5     +LDI R26 , LOW ( _0x1E + ( 85 ) )
00023e e0b2     +LDI R27 , HIGH ( _0x1E + ( 85 ) )
                 	__POINTW2MN _0x1E,85
00023f d099      	RCALL _lcd_puts
                 ; 0000 00A5         delay_ms(600);
000240 e5a8      	LDI  R26,LOW(600)
000241 e0b2      	LDI  R27,HIGH(600)
000242 940e 0326 	CALL SUBOPT_0x1
                 ; 0000 00A6         lcd_clear();
                 ; 0000 00A7   }
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA   PORTD = 0xF0;
                 _0x31:
000244 efe0      	LDI  R30,LOW(240)
000245 bbe2      	OUT  0x12,R30
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD }
000246 940e 034b 	CALL __LOADLOCR4
000248 9624      	ADIW R28,4
000249 91e9      	LD   R30,Y+
00024a bfef      	OUT  SREG,R30
00024b 91f9      	LD   R31,Y+
00024c 91e9      	LD   R30,Y+
00024d 91b9      	LD   R27,Y+
00024e 91a9      	LD   R26,Y+
00024f 9199      	LD   R25,Y+
000250 9189      	LD   R24,Y+
000251 9179      	LD   R23,Y+
000252 9169      	LD   R22,Y+
000253 90f9      	LD   R15,Y+
000254 9019      	LD   R1,Y+
000255 9009      	LD   R0,Y+
000256 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x1E:
000280           	.BYTE 0x61
                 ;
                 ;void main(void)
                 ; 0000 00B0 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 00B1 
                 ; 0000 00B2 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000257 e0e0      	LDI  R30,LOW(0)
000258 bbea      	OUT  0x1A,R30
                 ; 0000 00B3 
                 ; 0000 00B4 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000259 bbeb      	OUT  0x1B,R30
                 ; 0000 00B5 
                 ; 0000 00B6 
                 ; 0000 00B7 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
00025a e8e1      	LDI  R30,LOW(129)
00025b bbe7      	OUT  0x17,R30
                 ; 0000 00B8 
                 ; 0000 00B9 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00025c e0e0      	LDI  R30,LOW(0)
00025d bbe8      	OUT  0x18,R30
                 ; 0000 00BA 
                 ; 0000 00BB 
                 ; 0000 00BC DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00025e bbe4      	OUT  0x14,R30
                 ; 0000 00BD 
                 ; 0000 00BE PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00025f bbe5      	OUT  0x15,R30
                 ; 0000 00BF 
                 ; 0000 00C0 
                 ; 0000 00C1 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000260 e0ef      	LDI  R30,LOW(15)
000261 bbe1      	OUT  0x11,R30
                 ; 0000 00C2 
                 ; 0000 00C3 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000262 efe0      	LDI  R30,LOW(240)
000263 bbe2      	OUT  0x12,R30
                 ; 0000 00C4 
                 ; 0000 00C5 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
000264 b7eb      	IN   R30,0x3B
000265 62e0      	ORI  R30,0x20
000266 bfeb      	OUT  0x3B,R30
                 ; 0000 00C6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000267 e0e0      	LDI  R30,LOW(0)
000268 bfe5      	OUT  0x35,R30
                 ; 0000 00C7 MCUCSR=(0<<ISC2);
000269 bfe4      	OUT  0x34,R30
                 ; 0000 00C8 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
00026a e2e0      	LDI  R30,LOW(32)
00026b bfea      	OUT  0x3A,R30
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB lcd_init(16);
00026c e1a0      	LDI  R26,LOW(16)
00026d d07c      	RCALL _lcd_init
                 ; 0000 00CC 
                 ; 0000 00CD #asm("sei")
00026e 9478      	sei
                 ; 0000 00CE lcd_puts("PRESS THREE = TO SET PASSWORD");
                +
00026f eea1     +LDI R26 , LOW ( _0x38 + ( 0 ) )
000270 e0b2     +LDI R27 , HIGH ( _0x38 + ( 0 ) )
                 	__POINTW2MN _0x38,0
000271 d067      	RCALL _lcd_puts
                 ; 0000 00CF delay_ms(800);
000272 e2a0      	LDI  R26,LOW(800)
000273 e0b3      	LDI  R27,HIGH(800)
000274 940e 0326 	CALL SUBOPT_0x1
                 ; 0000 00D0 lcd_clear();
                 ; 0000 00D1 while (1)
                 _0x39:
                 ; 0000 00D2       {
                 ; 0000 00D3 
                 ; 0000 00D4 
                 ; 0000 00D5           idle();
000276 940e 0318 	CALL _idle
                 ; 0000 00D6 
                 ; 0000 00D7       }
000278 cffd      	RJMP _0x39
                 ; 0000 00D8 }
                 _0x3C:
000279 cfff      	RJMP _0x3C
                 ; .FEND
                 
                 	.DSEG
                 _0x38:
0002e1           	.BYTE 0x1E
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00027a 93aa      	ST   -Y,R26
00027b b3eb      	IN   R30,0x1B
00027c 70ef      	ANDI R30,LOW(0xF)
00027d 2fae      	MOV  R26,R30
00027e 81e8      	LD   R30,Y
00027f 7fe0      	ANDI R30,LOW(0xF0)
000280 2bea      	OR   R30,R26
000281 bbeb      	OUT  0x1B,R30
                +
000282 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000283 958a     +DEC R24
000284 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000285 9ada      	SBI  0x1B,2
                +
000286 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000287 958a     +DEC R24
000288 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000289 98da      	CBI  0x1B,2
                +
00028a e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028b 958a     +DEC R24
00028c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028d c088      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00028e 93aa      	ST   -Y,R26
00028f 81a8      	LD   R26,Y
000290 dfe9      	RCALL __lcd_write_nibble_G100
000291 81e8          ld    r30,y
000292 95e2          swap  r30
000293 83e8          st    y,r30
000294 81a8      	LD   R26,Y
000295 dfe4      	RCALL __lcd_write_nibble_G100
                +
000296 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000297 958a     +DEC R24
000298 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000299 c07c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00029a 93aa      	ST   -Y,R26
00029b 81e8      	LD   R30,Y
00029c e0f0      	LDI  R31,0
00029d 5fe7      	SUBI R30,LOW(-__base_y_G100)
00029e 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00029f 81e0      	LD   R30,Z
0002a0 81a9      	LDD  R26,Y+1
0002a1 0fae      	ADD  R26,R30
0002a2 dfeb      	RCALL __lcd_write_data
0002a3 81e9      	LDD  R30,Y+1
0002a4 93e0 030d 	STS  __lcd_x,R30
0002a6 81e8      	LD   R30,Y
0002a7 93e0 030e 	STS  __lcd_y,R30
0002a9 9622      	ADIW R28,2
0002aa 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ab e0a2      	LDI  R26,LOW(2)
0002ac 940e 032a 	CALL SUBOPT_0x2
0002ae e0ac      	LDI  R26,LOW(12)
0002af dfde      	RCALL __lcd_write_data
0002b0 e0a1      	LDI  R26,LOW(1)
0002b1 940e 032a 	CALL SUBOPT_0x2
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 93e0 030e 	STS  __lcd_y,R30
0002b6 93e0 030d 	STS  __lcd_x,R30
0002b8 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002b9 93aa      	ST   -Y,R26
0002ba 81a8      	LD   R26,Y
0002bb 30aa      	CPI  R26,LOW(0xA)
0002bc f031      	BREQ _0x2000005
0002bd 91e0 030f 	LDS  R30,__lcd_maxx
0002bf 91a0 030d 	LDS  R26,__lcd_x
0002c1 17ae      	CP   R26,R30
0002c2 f060      	BRLO _0x2000004
                 _0x2000005:
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 93ea      	ST   -Y,R30
0002c5 91a0 030e 	LDS  R26,__lcd_y
0002c7 5faf      	SUBI R26,-LOW(1)
0002c8 93a0 030e 	STS  __lcd_y,R26
0002ca dfcf      	RCALL _lcd_gotoxy
0002cb 81a8      	LD   R26,Y
0002cc 30aa      	CPI  R26,LOW(0xA)
0002cd f409      	BRNE _0x2000007
0002ce c047      	RJMP _0x20C0001
                 _0x2000007:
                 _0x2000004:
0002cf 91e0 030d 	LDS  R30,__lcd_x
0002d1 5fef      	SUBI R30,-LOW(1)
0002d2 93e0 030d 	STS  __lcd_x,R30
0002d4 9ad8      	SBI  0x1B,0
0002d5 81a8      	LD   R26,Y
0002d6 dfb7      	RCALL __lcd_write_data
0002d7 98d8      	CBI  0x1B,0
0002d8 c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002d9 93ba      	ST   -Y,R27
0002da 93aa      	ST   -Y,R26
0002db 931a      	ST   -Y,R17
                 _0x2000008:
0002dc 81a9      	LDD  R26,Y+1
0002dd 81ba      	LDD  R27,Y+1+1
0002de 91ed      	LD   R30,X+
0002df 83a9      	STD  Y+1,R26
0002e0 83ba      	STD  Y+1+1,R27
0002e1 2f1e      	MOV  R17,R30
0002e2 30e0      	CPI  R30,0
0002e3 f019      	BREQ _0x200000A
0002e4 2fa1      	MOV  R26,R17
0002e5 dfd3      	RCALL _lcd_putchar
0002e6 cff5      	RJMP _0x2000008
                 _0x200000A:
0002e7 8118      	LDD  R17,Y+0
0002e8 9623      	ADIW R28,3
0002e9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002ea 93aa      	ST   -Y,R26
0002eb b3ea      	IN   R30,0x1A
0002ec 6fe0      	ORI  R30,LOW(0xF0)
0002ed bbea      	OUT  0x1A,R30
0002ee 9ad2      	SBI  0x1A,2
0002ef 9ad0      	SBI  0x1A,0
0002f0 9ad1      	SBI  0x1A,1
0002f1 98da      	CBI  0x1B,2
0002f2 98d8      	CBI  0x1B,0
0002f3 98d9      	CBI  0x1B,1
0002f4 81e8      	LD   R30,Y
0002f5 93e0 030f 	STS  __lcd_maxx,R30
0002f7 58e0      	SUBI R30,-LOW(128)
                +
0002f8 93e0 030b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002fa 81e8      	LD   R30,Y
0002fb 54e0      	SUBI R30,-LOW(192)
                +
0002fc 93e0 030c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002fe e1a4      	LDI  R26,LOW(20)
0002ff e0b0      	LDI  R27,0
000300 940e 0337 	CALL _delay_ms
000302 940e 0330 	CALL SUBOPT_0x3
000304 940e 0330 	CALL SUBOPT_0x3
000306 940e 0330 	CALL SUBOPT_0x3
000308 e2a0      	LDI  R26,LOW(32)
000309 df70      	RCALL __lcd_write_nibble_G100
                +
00030a e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00030b 958a     +DEC R24
00030c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00030d e2a8      	LDI  R26,LOW(40)
00030e df7f      	RCALL __lcd_write_data
00030f e0a4      	LDI  R26,LOW(4)
000310 df7d      	RCALL __lcd_write_data
000311 e8a5      	LDI  R26,LOW(133)
000312 df7b      	RCALL __lcd_write_data
000313 e0a6      	LDI  R26,LOW(6)
000314 df79      	RCALL __lcd_write_data
000315 df95      	RCALL _lcd_clear
                 _0x20C0001:
000316 9621      	ADIW R28,1
000317 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _idle:
                 ; .FSTART _idle
000318 b7e5         in   r30,power_ctrl_reg
000319 78ef         cbr  r30,__sm_mask
00031a bfe5         out  power_ctrl_reg,r30
00031b b7ef         in   r30,sreg
00031c 9478         sei
00031d 9588         sleep
00031e bfef         out  sreg,r30
00031f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _password:
0002ff           	.BYTE 0x5
                 _cur:
000304           	.BYTE 0x5
                 __base_y_G100:
000309           	.BYTE 0x4
                 __lcd_x:
00030d           	.BYTE 0x1
                 __lcd_y:
00030e           	.BYTE 0x1
                 __lcd_maxx:
00030f           	.BYTE 0x1
                 __seed_G102:
000310           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000320 940e 02d9 	CALL _lcd_puts
000322 efa4      	LDI  R26,LOW(500)
000323 e0b1      	LDI  R27,HIGH(500)
000324 940c 0337 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000326 940e 0337 	CALL _delay_ms
000328 940c 02ab 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00032a 940e 028e 	CALL __lcd_write_data
00032c e0a3      	LDI  R26,LOW(3)
00032d e0b0      	LDI  R27,0
00032e 940c 0337 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000330 e3a0      	LDI  R26,LOW(48)
000331 940e 027a 	CALL __lcd_write_nibble_G100
                +
000333 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000334 958a     +DEC R24
000335 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000336 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000337 9610      	adiw r26,0
000338 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000339 ef8a     +LDI R24 , LOW ( 0xFA )
00033a e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00033b 9701     +SBIW R24 , 1
00033c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00033d 95a8      	wdr
00033e 9711      	sbiw r26,1
00033f f7c9      	brne __delay_ms0
                 __delay_ms1:
000340 9508      	ret
                 
                 __LSLW2:
000341 0fee      	LSL  R30
000342 1fff      	ROL  R31
000343 0fee      	LSL  R30
000344 1fff      	ROL  R31
000345 9508      	RET
                 
                 __SAVELOCR4:
000346 933a      	ST   -Y,R19
                 __SAVELOCR3:
000347 932a      	ST   -Y,R18
                 __SAVELOCR2:
000348 931a      	ST   -Y,R17
000349 930a      	ST   -Y,R16
00034a 9508      	RET
                 
                 __LOADLOCR4:
00034b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00034c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00034d 8119      	LDD  R17,Y+1
00034e 8108      	LD   R16,Y
00034f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  18 r1 :   3 r2 :   0 r3 :   0 r4 :   7 r5 :   4 r6 :  12 r7 :   9 
r8 :   6 r9 :   4 r10:   5 r11:   4 r12:   3 r13:   2 r14:   0 r15:   2 
r16:  14 r17:  18 r18:   2 r19:   8 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   5 r26:  99 r27:  40 r28:   5 r29:   1 r30: 145 r31:  39 
x  :   6 y  :  68 z  :  12 
Registers used: 30 out of 35 (85.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  13 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  31 
cbi   :   5 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  28 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :  12 cpi   :  17 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   0 jmp   :  26 ld    :  33 ldd   :   8 ldi   : 141 
lds   :  10 lpm   :  11 lsl   :   2 lsr   :   0 mov   :   9 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   2 out   :  28 pop   :   0 push  :   0 rcall :  33 ret   :  11 
reti  :   1 rjmp  :  32 rol   :   2 ror   :   0 sbc   :   0 sbci  :   5 
sbi   :   5 sbic  :   4 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   1 spm   :   0 
st    :  33 std   :   3 sts   :   9 sub   :   0 subi  :  10 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006a0   1400    296   1696   32768   5.2%
[.dseg] 0x000060 0x000314      0    180    180    2048   8.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
