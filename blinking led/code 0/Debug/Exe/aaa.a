;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int sw=0,count=0;
;
;
;
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000A TCNT0=0x86;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000B OCR0=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000C TIMSK=0x01;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000D }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0010 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0011 TCNT0=0x86;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0012 count++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0013 if (count > 3){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0014      PORTC.0=!PORTC.0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0015      count=0;
;PCODE: $0000002E VOL: 0
; 0000 0016      sw++;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0017      }
; 0000 0018 
; 0000 0019 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;void main(void)
; 0000 001C {
;PCODE: $00000036 VOL: 0
; 0000 001D DDRB=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 001E DDRC=0x01;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 001F PORTC.0=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0020 
; 0000 0021 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0022 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0023 MCUCSR=(0<<ISC2);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0024 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0025 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0026 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0027 SFIOR=(0<<ACME);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0028 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0029 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 002A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002B TIMSK=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 002C #asm("sei")
;PCODE: $00000054 VOL: 0
	sei
;PCODE: $00000055 VOL: 0
; 0000 002D 
; 0000 002E while (1)
;PCODE: $00000056 VOL: 0
; 0000 002F       {
; 0000 0030 
; 0000 0031         if (sw>3){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0032         sw=0;
;PCODE: $0000005A VOL: 0
; 0000 0033         TIMSK=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0034         }
; 0000 0035       }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0036 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;
