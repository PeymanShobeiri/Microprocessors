
AVRASM ver. 2.1.30  C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm Sat Dec 11 11:21:46 2021

C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1087): warning: Register r4 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _hour=R6
                 	.DEF _hour_msb=R7
                 	.DEF _min=R8
                 	.DEF _min_msb=R9
                 	.DEF _sec=R10
                 	.DEF _sec_msb=R11
                 	.DEF _reverse=R12
                 	.DEF _reverse_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
00002e 0001      	.DB  0x1,0x0
                 
                 _0x3:
00002f 063f
000030 4f5b
000031 6d66
000032 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000033 6f7f
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1135): warning: .cseg .db misalignment - padding zero byte
000034 0080      	.DB  0x7F,0x6F,0x80
                 _0x4:
C:\Users\Apple\Desktop\clock\code\Debug\List\clock1.asm(1137): warning: .cseg .db misalignment - padding zero byte
000035 00fa      	.DB  0xFA
                 
                 __GLOBAL_INI_TBL:
000036 000a      	.DW  0x0A
000037 0004      	.DW  0x04
000038 0054      	.DW  __REG_VARS*2
                 
000039 000b      	.DW  0x0B
00003a 0260      	.DW  _number
00003b 005e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bff5      	OUT  MCUCR,R31
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0129 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;int i=0;
                 ;const char number[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x80};
                 
                 	.DSEG
                 ;int hour=0,min=0,sec=0;
                 ;const int one_sec =250;
                 ;int reverse = 1;
                 ;
                 ;void check(void){
                 ; 0000 000A void check(void){
                 
                 	.CSEG
                 _check:
                 ; .FSTART _check
                 ; 0000 000B         if(sec>59){
000069 e3eb      	LDI  R30,LOW(59)
00006a e0f0      	LDI  R31,HIGH(59)
00006b 15ea      	CP   R30,R10
00006c 05fb      	CPC  R31,R11
00006d f42c      	BRGE _0x5
                 ; 0000 000C             min++;
00006e 01f4      	MOVW R30,R8
00006f 9631      	ADIW R30,1
000070 014f      	MOVW R8,R30
                 ; 0000 000D             sec=0;
000071 24aa      	CLR  R10
000072 24bb      	CLR  R11
                 ; 0000 000E          }
                 ; 0000 000F          if(min>59){
                 _0x5:
000073 e3eb      	LDI  R30,LOW(59)
000074 e0f0      	LDI  R31,HIGH(59)
000075 15e8      	CP   R30,R8
000076 05f9      	CPC  R31,R9
000077 f42c      	BRGE _0x6
                 ; 0000 0010             hour++;
000078 01f3      	MOVW R30,R6
000079 9631      	ADIW R30,1
00007a 013f      	MOVW R6,R30
                 ; 0000 0011             min=0;
00007b 2488      	CLR  R8
00007c 2499      	CLR  R9
                 ; 0000 0012          }
                 ; 0000 0013          if(hour>23){
                 _0x6:
00007d e1e7      	LDI  R30,LOW(23)
00007e e0f0      	LDI  R31,HIGH(23)
00007f 15e6      	CP   R30,R6
000080 05f7      	CPC  R31,R7
000081 f414      	BRGE _0x7
                 ; 0000 0014             hour=0;
000082 2466      	CLR  R6
000083 2477      	CLR  R7
                 ; 0000 0015          }
                 ; 0000 0016 
                 ; 0000 0017           if(sec<0){
                 _0x7:
000084 2400      	CLR  R0
000085 14a0      	CP   R10,R0
000086 04b0      	CPC  R11,R0
000087 f434      	BRGE _0x8
                 ; 0000 0018             min--;
000088 01f4      	MOVW R30,R8
000089 9731      	SBIW R30,1
00008a 014f      	MOVW R8,R30
                 ; 0000 0019             sec=59;
00008b e3eb      	LDI  R30,LOW(59)
00008c e0f0      	LDI  R31,HIGH(59)
00008d 015f      	MOVW R10,R30
                 ; 0000 001A           }
                 ; 0000 001B           if(min<0){
                 _0x8:
00008e 2400      	CLR  R0
00008f 1480      	CP   R8,R0
000090 0490      	CPC  R9,R0
000091 f434      	BRGE _0x9
                 ; 0000 001C             hour--;
000092 01f3      	MOVW R30,R6
000093 9731      	SBIW R30,1
000094 013f      	MOVW R6,R30
                 ; 0000 001D             min=59;
000095 e3eb      	LDI  R30,LOW(59)
000096 e0f0      	LDI  R31,HIGH(59)
000097 014f      	MOVW R8,R30
                 ; 0000 001E           }
                 ; 0000 001F           if(hour<0){
                 _0x9:
000098 2400      	CLR  R0
000099 1460      	CP   R6,R0
00009a 0470      	CPC  R7,R0
00009b f41c      	BRGE _0xA
                 ; 0000 0020             hour=23;
00009c e1e7      	LDI  R30,LOW(23)
00009d e0f0      	LDI  R31,HIGH(23)
00009e 013f      	MOVW R6,R30
                 ; 0000 0021           }
                 ; 0000 0022       }
                 _0xA:
00009f 9508      	RET
                 ; .FEND
                 ;
                 ;void show(int n){
                 ; 0000 0024 void show(int n){
                 _show:
                 ; .FSTART _show
                 ; 0000 0025     int temp;
                 ; 0000 0026     switch(n){
0000a0 93ba      	ST   -Y,R27
0000a1 93aa      	ST   -Y,R26
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
                 ;	n -> Y+2
                 ;	temp -> R16,R17
0000a4 81ea      	LDD  R30,Y+2
0000a5 81fb      	LDD  R31,Y+2+1
                 ; 0000 0027         case 0:
0000a6 9730      	SBIW R30,0
0000a7 f419      	BRNE _0xE
                 ; 0000 0028             temp = hour/10;
0000a8 01d3      	MOVW R26,R6
0000a9 d0b4      	RCALL SUBOPT_0x0
0000aa c031      	RJMP _0x32
                 ; 0000 0029             PORTC=number[temp];
                 ; 0000 002A             break;
                 ; 0000 002B         case 1:
                 _0xE:
0000ab 30e1      	CPI  R30,LOW(0x1)
0000ac e0a0      	LDI  R26,HIGH(0x1)
0000ad 07fa      	CPC  R31,R26
0000ae f411      	BRNE _0xF
                 ; 0000 002C             temp = hour%10;
0000af 01d3      	MOVW R26,R6
0000b0 c027      	RJMP _0x33
                 ; 0000 002D             PORTC=number[temp];
                 ; 0000 002E             break;
                 ; 0000 002F         case 2:
                 _0xF:
0000b1 30e2      	CPI  R30,LOW(0x2)
0000b2 e0a0      	LDI  R26,HIGH(0x2)
0000b3 07fa      	CPC  R31,R26
0000b4 f419      	BRNE _0x10
                 ; 0000 0030             PORTC=number[10];
                +
0000b5 91e0 026a+LDS R30 , _number + ( 10 )
                 	__GETB1MN _number,10
0000b7 c02a      	RJMP _0x34
                 ; 0000 0031             break;
                 ; 0000 0032         case 3:
                 _0x10:
0000b8 30e3      	CPI  R30,LOW(0x3)
0000b9 e0a0      	LDI  R26,HIGH(0x3)
0000ba 07fa      	CPC  R31,R26
0000bb f419      	BRNE _0x11
                 ; 0000 0033             temp = min/10;
0000bc 01d4      	MOVW R26,R8
0000bd d0a0      	RCALL SUBOPT_0x0
0000be c01d      	RJMP _0x32
                 ; 0000 0034             PORTC=number[temp];
                 ; 0000 0035             break;
                 ; 0000 0036         case 4:
                 _0x11:
0000bf 30e4      	CPI  R30,LOW(0x4)
0000c0 e0a0      	LDI  R26,HIGH(0x4)
0000c1 07fa      	CPC  R31,R26
0000c2 f411      	BRNE _0x12
                 ; 0000 0037             temp = min%10;
0000c3 01d4      	MOVW R26,R8
0000c4 c013      	RJMP _0x33
                 ; 0000 0038             PORTC=number[temp];
                 ; 0000 0039             break;
                 ; 0000 003A         case 5:
                 _0x12:
0000c5 30e5      	CPI  R30,LOW(0x5)
0000c6 e0a0      	LDI  R26,HIGH(0x5)
0000c7 07fa      	CPC  R31,R26
0000c8 f419      	BRNE _0x13
                 ; 0000 003B             PORTC=number[10];
                +
0000c9 91e0 026a+LDS R30 , _number + ( 10 )
                 	__GETB1MN _number,10
0000cb c016      	RJMP _0x34
                 ; 0000 003C             break;
                 ; 0000 003D         case 6:
                 _0x13:
0000cc 30e6      	CPI  R30,LOW(0x6)
0000cd e0a0      	LDI  R26,HIGH(0x6)
0000ce 07fa      	CPC  R31,R26
0000cf f419      	BRNE _0x14
                 ; 0000 003E             temp=sec/10;
0000d0 01d5      	MOVW R26,R10
0000d1 d08c      	RCALL SUBOPT_0x0
0000d2 c009      	RJMP _0x32
                 ; 0000 003F             PORTC=number[temp];
                 ; 0000 0040             break;
                 ; 0000 0041         case 7:
                 _0x14:
0000d3 30e7      	CPI  R30,LOW(0x7)
0000d4 e0a0      	LDI  R26,HIGH(0x7)
0000d5 07fa      	CPC  R31,R26
0000d6 f461      	BRNE _0xD
                 ; 0000 0042             temp = sec%10;
0000d7 01d5      	MOVW R26,R10
                 _0x33:
0000d8 e0ea      	LDI  R30,LOW(10)
0000d9 e0f0      	LDI  R31,HIGH(10)
0000da 940e 01a0 	CALL __MODW21
                 _0x32:
0000dc 018f      	MOVW R16,R30
                 ; 0000 0043             PORTC=number[temp];
0000dd e6a0      	LDI  R26,LOW(_number)
0000de e0b2      	LDI  R27,HIGH(_number)
0000df 0fa0      	ADD  R26,R16
0000e0 1fb1      	ADC  R27,R17
0000e1 91ec      	LD   R30,X
                 _0x34:
0000e2 bbe5      	OUT  0x15,R30
                 ; 0000 0044             break;
                 ; 0000 0045     }
                 _0xD:
                 ; 0000 0046 }
0000e3 8119      	LDD  R17,Y+1
0000e4 8108      	LDD  R16,Y+0
0000e5 9624      	ADIW R28,4
0000e6 9508      	RET
                 ; .FEND
                 ;
                 ;void button(void){
                 ; 0000 0048 void button(void){
                 _button:
                 ; .FSTART _button
                 ; 0000 0049       if(PINA.0==0){
0000e7 99c8      	SBIC 0x19,0
0000e8 c00c      	RJMP _0x16
                 ; 0000 004A             reverse = reverse * -1;
0000e9 01f6      	MOVW R30,R12
0000ea efaf      	LDI  R26,LOW(65535)
0000eb efbf      	LDI  R27,HIGH(65535)
0000ec 940e 0183 	CALL __MULW12
0000ee 016f      	MOVW R12,R30
                 ; 0000 004B             if(reverse==-1){
0000ef d073      	RCALL SUBOPT_0x1
0000f0 f411      	BRNE _0x17
                 ; 0000 004C                 PORTB=0x01;
0000f1 e0e1      	LDI  R30,LOW(1)
0000f2 c001      	RJMP _0x35
                 ; 0000 004D             }
                 ; 0000 004E             else{
                 _0x17:
                 ; 0000 004F                 PORTB=0x00;
0000f3 e0e0      	LDI  R30,LOW(0)
                 _0x35:
0000f4 bbe8      	OUT  0x18,R30
                 ; 0000 0050                 }
                 ; 0000 0051             }
                 ; 0000 0052         if(PINA.1==0 && reverse==1){
                 _0x16:
0000f5 99c9      	SBIC 0x19,1
0000f6 c002      	RJMP _0x1A
0000f7 d070      	RCALL SUBOPT_0x2
0000f8 f009      	BREQ _0x1B
                 _0x1A:
0000f9 c003      	RJMP _0x19
                 _0x1B:
                 ; 0000 0053             sec++;
0000fa 01f5      	MOVW R30,R10
0000fb 9631      	ADIW R30,1
0000fc 015f      	MOVW R10,R30
                 ; 0000 0054         }
                 ; 0000 0055         if(PINA.1==0 && reverse==-1){
                 _0x19:
0000fd 99c9      	SBIC 0x19,1
0000fe c002      	RJMP _0x1D
0000ff d063      	RCALL SUBOPT_0x1
000100 f009      	BREQ _0x1E
                 _0x1D:
000101 c003      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0056             sec--;
000102 01f5      	MOVW R30,R10
000103 9731      	SBIW R30,1
000104 015f      	MOVW R10,R30
                 ; 0000 0057         }
                 ; 0000 0058         if(PINA.2==0 && reverse==1){
                 _0x1C:
000105 99ca      	SBIC 0x19,2
000106 c002      	RJMP _0x20
000107 d060      	RCALL SUBOPT_0x2
000108 f009      	BREQ _0x21
                 _0x20:
000109 c003      	RJMP _0x1F
                 _0x21:
                 ; 0000 0059             min++;
00010a 01f4      	MOVW R30,R8
00010b 9631      	ADIW R30,1
00010c 014f      	MOVW R8,R30
                 ; 0000 005A         }
                 ; 0000 005B         if(PINA.2==0 && reverse==-1){
                 _0x1F:
00010d 99ca      	SBIC 0x19,2
00010e c002      	RJMP _0x23
00010f d053      	RCALL SUBOPT_0x1
000110 f009      	BREQ _0x24
                 _0x23:
000111 c003      	RJMP _0x22
                 _0x24:
                 ; 0000 005C             min--;
000112 01f4      	MOVW R30,R8
000113 9731      	SBIW R30,1
000114 014f      	MOVW R8,R30
                 ; 0000 005D         }
                 ; 0000 005E         if(PINA.3==0 && reverse==1){
                 _0x22:
000115 99cb      	SBIC 0x19,3
000116 c002      	RJMP _0x26
000117 d050      	RCALL SUBOPT_0x2
000118 f009      	BREQ _0x27
                 _0x26:
000119 c003      	RJMP _0x25
                 _0x27:
                 ; 0000 005F             hour++;
00011a 01f3      	MOVW R30,R6
00011b 9631      	ADIW R30,1
00011c 013f      	MOVW R6,R30
                 ; 0000 0060         }
                 ; 0000 0061         if(PINA.3==0 && reverse==-1){
                 _0x25:
00011d 99cb      	SBIC 0x19,3
00011e c002      	RJMP _0x29
00011f d043      	RCALL SUBOPT_0x1
000120 f009      	BREQ _0x2A
                 _0x29:
000121 c003      	RJMP _0x28
                 _0x2A:
                 ; 0000 0062             hour--;
000122 01f3      	MOVW R30,R6
000123 9731      	SBIW R30,1
000124 013f      	MOVW R6,R30
                 ; 0000 0063         }
                 ; 0000 0064          sec++;
                 _0x28:
000125 01f5      	MOVW R30,R10
000126 9631      	ADIW R30,1
000127 015f      	MOVW R10,R30
                 ; 0000 0065    }
000128 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void){
                 ; 0000 0067 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0068 char seven_seg=0x01;
                 ; 0000 0069 int seg_num=0;
                 ; 0000 006A 
                 ; 0000 006B 
                 ; 0000 006C DDRC=0xff;
                 ;	seven_seg -> R17
                 ;	seg_num -> R18,R19
000129 e011      	LDI  R17,1
                +
00012a e020     +LDI R18 , LOW ( 0 )
00012b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00012c efef      	LDI  R30,LOW(255)
00012d bbe4      	OUT  0x14,R30
                 ; 0000 006D DDRD=0xff;
00012e bbe1      	OUT  0x11,R30
                 ; 0000 006E PORTC=0xff;
00012f bbe5      	OUT  0x15,R30
                 ; 0000 006F DDRA=0x00;
000130 e0e0      	LDI  R30,LOW(0)
000131 bbea      	OUT  0x1A,R30
                 ; 0000 0070 PORTA=0xff;
000132 efef      	LDI  R30,LOW(255)
000133 bbeb      	OUT  0x1B,R30
                 ; 0000 0071 DDRB=0xff;
000134 bbe7      	OUT  0x17,R30
                 ; 0000 0072 PORTB=0x00;
000135 e0e0      	LDI  R30,LOW(0)
000136 bbe8      	OUT  0x18,R30
                 ; 0000 0073 
                 ; 0000 0074 for(i=0;;i++){
000137 2444      	CLR  R4
000138 2455      	CLR  R5
                 _0x2C:
                 ; 0000 0075 
                 ; 0000 0076      PORTD=~seven_seg;
000139 2fe1      	MOV  R30,R17
00013a 95e0      	COM  R30
00013b bbe2      	OUT  0x12,R30
                 ; 0000 0077      seven_seg=seven_seg<<1;
00013c 0f11      	LSL  R17
                 ; 0000 0078      if(seven_seg==0x00){
00013d 3010      	CPI  R17,0
00013e f409      	BRNE _0x2E
                 ; 0000 0079         seven_seg=0x01;
00013f e011      	LDI  R17,LOW(1)
                 ; 0000 007A      }
                 ; 0000 007B 
                 ; 0000 007C      if(seg_num>7){
                 _0x2E:
                +
000140 3028     +CPI R18 , LOW ( 8 )
000141 e0e0     +LDI R30 , HIGH ( 8 )
000142 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000143 f014      	BRLT _0x2F
                 ; 0000 007D         seg_num=0;
                +
000144 e020     +LDI R18 , LOW ( 0 )
000145 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 007E      }
                 ; 0000 007F 
                 ; 0000 0080       check();
                 _0x2F:
000146 df22      	RCALL _check
                 ; 0000 0081 
                 ; 0000 0082      show(seg_num);
000147 01d9      	MOVW R26,R18
000148 df57      	RCALL _show
                 ; 0000 0083 
                 ; 0000 0084      seg_num++;
                +
000149 5f2f     +SUBI R18 , LOW ( - 1 )
00014a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0085      delay_ms(4);
00014b e0a4      	LDI  R26,LOW(4)
00014c e0b0      	LDI  R27,0
00014d 940e 016d 	CALL _delay_ms
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088      if(i%one_sec==0){
00014f 01d2      	MOVW R26,R4
000150 efea      	LDI  R30,LOW(250)
000151 e0f0      	LDI  R31,HIGH(250)
000152 940e 01a0 	CALL __MODW21
000154 9730      	SBIW R30,0
000155 f419      	BRNE _0x30
                 ; 0000 0089         i=0;
000156 2444      	CLR  R4
000157 2455      	CLR  R5
                 ; 0000 008A         button();
000158 df8e      	RCALL _button
                 ; 0000 008B     }
                 ; 0000 008C   }
                 _0x30:
000159 01f2      	MOVW R30,R4
00015a 9631      	ADIW R30,1
00015b 012f      	MOVW R4,R30
00015c cfdc      	RJMP _0x2C
                 ; 0000 008D  }
                 _0x31:
00015d cfff      	RJMP _0x31
                 ; .FEND
                 ;
                 
                 	.DSEG
                 _number:
000260           	.BYTE 0xB
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00015e e0ea      	LDI  R30,LOW(10)
00015f e0f0      	LDI  R31,HIGH(10)
000160 940e 019b 	CALL __DIVW21
000162 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000163 efef      	LDI  R30,LOW(65535)
000164 efff      	LDI  R31,HIGH(65535)
000165 15ec      	CP   R30,R12
000166 05fd      	CPC  R31,R13
000167 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000168 e0e1      	LDI  R30,LOW(1)
000169 e0f0      	LDI  R31,HIGH(1)
00016a 15ec      	CP   R30,R12
00016b 05fd      	CPC  R31,R13
00016c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00016d 9610      	adiw r26,0
00016e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016f ef8a     +LDI R24 , LOW ( 0xFA )
000170 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000171 9701     +SBIW R24 , 1
000172 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000173 95a8      	wdr
000174 9711      	sbiw r26,1
000175 f7c9      	brne __delay_ms0
                 __delay_ms1:
000176 9508      	ret
                 
                 __ANEGW1:
000177 95f1      	NEG  R31
000178 95e1      	NEG  R30
000179 40f0      	SBCI R31,0
00017a 9508      	RET
                 
                 __MULW12U:
00017b 9ffa      	MUL  R31,R26
00017c 2df0      	MOV  R31,R0
00017d 9feb      	MUL  R30,R27
00017e 0df0      	ADD  R31,R0
00017f 9fea      	MUL  R30,R26
000180 2de0      	MOV  R30,R0
000181 0df1      	ADD  R31,R1
000182 9508      	RET
                 
                 __MULW12:
000183 d02a      	RCALL __CHKSIGNW
000184 dff6      	RCALL __MULW12U
000185 f40e      	BRTC __MULW121
000186 dff0      	RCALL __ANEGW1
                 __MULW121:
000187 9508      	RET
                 
                 __DIVW21U:
000188 2400      	CLR  R0
000189 2411      	CLR  R1
00018a e190      	LDI  R25,16
                 __DIVW21U1:
00018b 0faa      	LSL  R26
00018c 1fbb      	ROL  R27
00018d 1c00      	ROL  R0
00018e 1c11      	ROL  R1
00018f 1a0e      	SUB  R0,R30
000190 0a1f      	SBC  R1,R31
000191 f418      	BRCC __DIVW21U2
000192 0e0e      	ADD  R0,R30
000193 1e1f      	ADC  R1,R31
000194 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000195 60a1      	SBR  R26,1
                 __DIVW21U3:
000196 959a      	DEC  R25
000197 f799      	BRNE __DIVW21U1
000198 01fd      	MOVW R30,R26
000199 01d0      	MOVW R26,R0
00019a 9508      	RET
                 
                 __DIVW21:
00019b d012      	RCALL __CHKSIGNW
00019c dfeb      	RCALL __DIVW21U
00019d f40e      	BRTC __DIVW211
00019e dfd8      	RCALL __ANEGW1
                 __DIVW211:
00019f 9508      	RET
                 
                 __MODW21:
0001a0 94e8      	CLT
0001a1 ffb7      	SBRS R27,7
0001a2 c004      	RJMP __MODW211
0001a3 95a0      	COM  R26
0001a4 95b0      	COM  R27
0001a5 9611      	ADIW R26,1
0001a6 9468      	SET
                 __MODW211:
0001a7 fdf7      	SBRC R31,7
0001a8 dfce      	RCALL __ANEGW1
0001a9 dfde      	RCALL __DIVW21U
0001aa 01fd      	MOVW R30,R26
0001ab f40e      	BRTC __MODW212
0001ac dfca      	RCALL __ANEGW1
                 __MODW212:
0001ad 9508      	RET
                 
                 __CHKSIGNW:
0001ae 94e8      	CLT
0001af fff7      	SBRS R31,7
0001b0 c002      	RJMP __CHKSW1
0001b1 dfc5      	RCALL __ANEGW1
0001b2 9468      	SET
                 __CHKSW1:
0001b3 ffb7      	SBRS R27,7
0001b4 c006      	RJMP __CHKSW2
0001b5 95a0      	COM  R26
0001b6 95b0      	COM  R27
0001b7 9611      	ADIW R26,1
0001b8 f800      	BLD  R0,0
0001b9 9403      	INC  R0
0001ba fa00      	BST  R0,0
                 __CHKSW2:
0001bb 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  24 r1 :   6 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :  14 r7 :   3 
r8 :  14 r9 :   3 r10:  12 r11:   3 r12:   4 r13:   2 r14:   0 r15:   0 
r16:   4 r17:   8 r18:   5 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  43 r27:  13 r28:   2 r29:   1 r30: 112 r31:  37 
x  :   4 y  :   8 z  :   7 
Registers used: 28 out of 35 (80.0%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  11 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   8 cpc   :  16 cpi   :   9 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  22 ld    :   1 ldd   :   4 ldi   :  63 
lds   :   2 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   3 movw  :  44 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  15 pop   :   0 push  :   0 rcall :  23 ret   :  14 
reti  :   0 rjmp  :  28 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   0 sbic  :   7 sbis  :   0 sbiw  :  12 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   7 std   :   0 sts   :   0 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000378    850     38    888   32768   2.7%
[.dseg] 0x000060 0x00026b      0     11     11    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
